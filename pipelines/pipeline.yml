trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: service_principals

parameters:
  - name: env
    displayName: Targeted environment
    type: string
    values:
      - test
      - dev
      - prod

  - name: plan
    displayName: Run infrastructure plan?
    type: boolean
    default: true

  - name: apply
    displayName: Run infrastructure deployment and provision?
    type: boolean
    default: true

stages:
  - ${{ if eq(parameters.plan, true) }}:
    - stage: plan
      displayName: Plan environment
      jobs:
        - job: plan
          displayName: Plan infrastructure
          steps:

            - template: templates/init.yml
              parameters:
                env: ${{ parameters.env }}

            - template: templates/dummy_ssh.yml

            - task: Bash@3
              displayName: Plan Terraform
              inputs:
                workingDirectory: infrastructure
                targetType: 'inline'
                script: terraform plan -var-file=${{ parameters.env }}/env.tfvars
              env:
                ARM_CLIENT_ID: $(arm_client_id)
                ARM_CLIENT_SECRET: $(arm_client_secret)
                ARM_TENANT_ID: $(arm_tenant_id)
                ARM_SUBSCRIPTION_ID: $(arm_subscription_id)

  - ${{ if eq(parameters.apply, true) }}:
    - stage: deploy
      displayName: Deploy to environment
      jobs:
        - deployment: deploy
          displayName: Deploy to environment
          environment: ${{ parameters.env }}
          strategy:
            runOnce:
              deploy:
                steps:

                  - checkout: self
                    clean: true

                  - template: templates/init.yml
                    parameters:
                      env: ${{ parameters.env }}

                  - task: Bash@3
                    displayName: Create ssh key file
                    inputs:
                      workingDirectory: infrastructure
                      targetType: 'inline'
                      script: |
                        rm -rf keys
                        mkdir keys
                        ssh-keygen -t rsa -b 4098 -P "" -f keys/key
                        ls keys
                        pwd

                  - task: Bash@3
                    displayName: Apply Terraform
                    inputs:
                      workingDirectory: infrastructure
                      targetType: 'inline'
                      script: |
                        terraform apply \
                        -var-file=${{ parameters.env }}/env.tfvars \
                        -var="os_user=${{ parameters.env }}AdminUser" \
                        -auto-approve
                    env:
                      ARM_CLIENT_ID: $(arm_client_id)
                      ARM_CLIENT_SECRET: $(arm_client_secret)
                      ARM_TENANT_ID: $(arm_tenant_id)
                      ARM_SUBSCRIPTION_ID: $(arm_subscription_id)

                  - task: Bash@3
                    displayName: Extract IP from Terraform output
                    inputs:
                      workingDirectory: infrastructure
                      targetType: 'inline'
                      script: terraform output -json >> output.json
                    env:
                      ARM_CLIENT_ID: $(arm_client_id)
                      ARM_CLIENT_SECRET: $(arm_client_secret)
                      ARM_TENANT_ID: $(arm_tenant_id)
                      ARM_SUBSCRIPTION_ID: $(arm_subscription_id)

                  - task: Bash@3
                    name: set_var_step
                    displayName: Set IP variable
                    inputs:
                      workingDirectory: pipelines
                      targetType: 'inline'
                      script: echo "##vso[task.setvariable variable=target_ip;isOutput=true]$(python3 scripts/json_extract.py $(System.DefaultWorkingDirectory)/infrastructure/output.json)"

        - job: provision
          displayName: Provision the server
          dependsOn: deploy
          variables:
            target_ip: $[ dependencies.deploy.outputs['deploy.set_var_step.target_ip'] ]
          steps:

            - task: Bash@3
              displayName: Provision server
              inputs:
                workingDirectory: configuration
                targetType: 'inline'
                script: |
                  ansible-playbook --version
                  ansible-playbook \
                  --private-key $(System.DefaultWorkingDirectory)/infrastructure/keys/key \
                  --user ${{ parameters.env }}AdminUser \
                  --extra-vars target_server=$(target_ip) \
                  --inventory inventory.ini \
                  playbook.yml
              env:
                ANSIBLE_HOST_KEY_CHECKING: false
