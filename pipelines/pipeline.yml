trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: service_principals

parameters:
  - name: env
    displayName: Targeted environment
    type: string
    values:
      - test
      - dev
      - prod

  - name: plan
    displayName: Run infrastructure plan?
    type: boolean
    default: true

  - name: apply
    displayName: Run infrastructure deployment and provision?
    type: boolean
    default: true

stages:
  - ${{ if eq(parameters.plan, true) }}:
    - stage: plan
      displayName: Plan environment
      jobs:
        - job: plan
          displayName: Plan infrastructure
          steps:

            - template: templates/init.yml
              parameters:
                env: ${{ parameters.env }}

            - task: Bash@3
              displayName: Plan Terraform
              inputs:
                workingDirectory: infrastructure
                targetType: 'inline'
                script: |
                  terraform plan \
                  -var-file=${{ parameters.env }}/env.tfvars \
              env:
                ARM_CLIENT_ID: $(arm_client_id)
                ARM_CLIENT_SECRET: $(arm_client_secret)
                ARM_TENANT_ID: $(arm_tenant_id)
                ARM_SUBSCRIPTION_ID: $(arm_subscription_id)
                TF_VAR_os_user: fake_username

  - ${{ if eq(parameters.apply, true) }}:
    - stage: deploy
      displayName: Deploy to environment
      jobs:
        - deployment: deploy
          displayName: Deploy to environment
          environment: ${{ parameters.env }}
          variables:
            - name: username
              value: ${{ parameters.env }}AdminUser
          strategy:
            runOnce:
              deploy:
                steps:

                  - checkout: self
                    clean: true

                  - template: templates/init.yml
                    parameters:
                      env: ${{ parameters.env }}

                  - task: Bash@3
                    displayName: Apply Terraform
                    inputs:
                      workingDirectory: infrastructure
                      targetType: 'inline'
                      script: |
                        terraform apply \
                        -var-file=${{ parameters.env }}/env.tfvars \
                        -auto-approve
                    env:
                      ARM_CLIENT_ID: $(arm_client_id)
                      ARM_CLIENT_SECRET: $(arm_client_secret)
                      ARM_TENANT_ID: $(arm_tenant_id)
                      ARM_SUBSCRIPTION_ID: $(arm_subscription_id)
                      TF_VAR_os_user: $(username)

                  - task: Bash@3
                    displayName: Terraform output into JSON file
                    inputs:
                      workingDirectory: infrastructure
                      targetType: 'inline'
                      script: terraform output -json >> $(System.DefaultWorkingDirectory)/output.json
                    env:
                      ARM_CLIENT_ID: $(arm_client_id)
                      ARM_CLIENT_SECRET: $(arm_client_secret)
                      ARM_TENANT_ID: $(arm_tenant_id)
                      ARM_SUBSCRIPTION_ID: $(arm_subscription_id)

                  - task: DownloadSecureFile@1
                    name: ssh_key
                    displayName: Download ssh private key
                    inputs:
                      secureFile: gl_key

                  - task: Bash@3
                    displayName: Set ssh key access permissions
                    inputs:
                      targetType: 'inline'
                      script: chmod 0400 $(ssh_key.secureFilePath)

                  - task: Bash@3
                    displayName: Provision server
                    inputs:
                      targetType: 'inline'
                      script: |
                        ansible-playbook --version
                        ansible-playbook \
                        --private-key $(ssh_key.secureFilePath) \
                        --user $(username) \
                        --extra-vars target_server=$(python3 scripts/json_extract.py output.json) \
                        --extra-vars env=${{ parameters.env }} \
                        --inventory configuration/inventory.ini \
                        configuration/playbook.yml -v
                    env:
                      ANSIBLE_HOST_KEY_CHECKING: false
